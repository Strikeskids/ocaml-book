

* Introduction

  Format is a pretty printer library. 

  

** Quick Examlpe
  #+BEGIN_SRC ocaml
  open_box 0; print_string "x ="; print_space ();
  print_int 1; close_box (); print_newline ()
  (** equivalent *)
  printf "@[x =@ %i@]@." 1.
  
  #+END_SRC

** Interative Use
  In case of =interactive use in toplevel=, the system closes all
  opened boxes and flushes all pending text (as with the
  =print_newline= function) after =each phrase=. Each phrase is
  therefore executed in the *initial state* of the pretty-printer.

  The material output by the following functions is *delayed* in the
  pretty-printer queue in order to compute the proper line
  breaking. Hence, you *should not mix* calls to the printing
  functions of *the basic I/O system* with calls *to the functions of
  this module*: this could result in some strange output seemingly
  unrelated with the evaluation order of printing commands.

  Some important APIs:
  - =open_box d= 
    
    Opens a new pretty-printing box with offset *d*. This box is the
    general purpose pretty-printing box. Material in this box is
    displayed *horizontal or vertical*; break hints inside the box
    *may lead to a new line*, if there is no more room on the line to
    print the remainder of the box, or if a new line may lead to a new
    indentation (demonstrating the indentation of the box). When a new
    line is printed in the box, *d is added* to the current
    indentation.

  - =print_as len str= prints str in the current box. The
    pretty-printer formats str as if it were of length len

  - =print_space ()= is used to separate items (typically to print a
    space between two words). It indicates that the line may be split
    at this point. It either *prints one space* or *splits the
    line*. It is equivalent to *print_break 1 0*.
   
  - =print_cut ()= is used to *mark* a good break position. It
    indicates that the line may be split at this point. It either
    *prints nothing* or *splits the line*. This allows line splitting
    at the current point, without printing spaces or adding
    indentation. It is equivalent to *print_break 0 0*.  Inserts a
    break hint in a pretty-printing box.
    
  - =print_break nspaces offset= indicates that the line may be split
    (a newline character is printed) at this point, if the contents of
    the current box does not fit on the current line. If the line is
    split at that point, *offset* is added to the current
    indentation. If the line is not split, nspaces spaces are printed.

* Boxes, Break hints, and Indentation rules.

  A box can state /the extra indentation of every new line/ opened in
  its scope. This extra indentation is named box breaking indentation.

  A break hint can also set the additional indentation of the new line
  it may fire. This extra indentation is named /hint breaking
  indentation/.

  If break hint *bh* fires a new line within box *b*, then the indentation
  of the new line is simply the sum of: *the current indentation of box b*
  + *the additional box breaking indentation, as defined by box b* + *the
  additional hint breaking indentation*, as defined by break hint bh.

  

* Box 
  - =h box=
    Within this box, break hints *do not* lead to line breaks.
    
  - =v box=
    Within this box, *every break* hint leads to a new line.

  - =hv box= 
    
    If it is possible, the entire box is written on a single line;
    *otherwise*, *every break* hint within the box leads to a new line.


  - =hov box=
    
    Within this box, break hints are used to cut the line when there
    is no more room on the line.

** Example
   Suppose we can write 10 chars before the right margin (that
   indicates no more room). We represent any char as a *-* sign;
   characters *[* and *]* indicates the opening and closing of a box
   and *b* stands for a break hint given to the pretty-printing engine.

   The output =--b--b--= is displayed like this (the b symbol stands
   for the value of the break that is explained below):

   - within a *h* box: 
     =--b--b--=
   - within a ``v'' box: 

   #+BEGIN_EXAMPLE
     --b
     --b
     --
   #+END_EXAMPLE
      
   
   - within a =hv= box: If there is enough room to print the box on
     the line:
     #+BEGIN_EXAMPLE
     --b--b--
     #+END_EXAMPLE
     But =---b---b---= that cannot fit on the line is written
     #+BEGIN_EXAMPLE
       ---b
       ---b
       ---
     #+END_EXAMPLE
     
   - within a =hov= box:
     If there is enough room to print the box on the line:
     #+BEGIN_EXAMPLE
     --b--b--
     #+END_EXAMPLE
     
     But if =---b---b---= cannot fit on the line, it is written as 
     #+BEGIN_EXAMPLE
       ---b---b 
       ---
     #+END_EXAMPLE

     Break hints are also used to output spaces. You output a break
     hint using *print_break sp indent*, and this *sp* integer is used
     to print *sp* spaces. Thus *print_break sp ...* may be thought
     as: *print sp spaces* or *output a new line*.


   For instance, if b is *break 1 0* in the output *--b--b--*, we get

   - Within a ``h'' box:    =-- -- --=
   - Within a ``v'' box:
     #+BEGIN_EXAMPLE
       -- 
       -- 
       -- 
     #+END_EXAMPLE
   - within a ``hv'' box:
     #+BEGIN_EXAMPLE
       -- -- -- 
     #+END_EXAMPLE

     or, according to the remaining room on the line:
     #+BEGIN_EXAMPLE
       -- 
       -- 
       -- 
     #+END_EXAMPLE
   and similarly for ``hov'' boxes.

* Directives
   - "@ " outputs a breakable space =print_space ()=

   - "@," output a break hint =print_cut ()=

   - =@;<n m>= emit a =full= break hint =print_break n m=
     the n, m is also dynamic

     #+BEGIN_SRC ocaml
       fprintf std_formatter "@[<hov%d>hahaha lvery long line ghoshoho@;<%d %d>hgoh@]" 3 5 10;;
       hahaha lvery long line ghoshoho     hgoh- : unit = ()     
     #+END_SRC
   - =@.= end the pretty-printing, closing all the boxes still opened
     =print_newline ()=
     
   - =@[<hov n>= is equivalent to =open_hovbox n=.
     the n is dynamic

     #+BEGIN_SRC ocaml
       fprintf std_formatter "@[<hov%d>hahah@\nhgoh@]" 3 ;;
       hahah
          hgoh-     

     #+END_SRC
   - =@\n=
     =Format.force_newline ()=

     #+BEGIN_SRC ocaml
       let print2d ppf a =
         fprintf ppf "@[<2>[|";
         for i = 0 to Array2.dim1 a - 1 do
           pp_force_newline ppf ();
           for j = 0 to Array2.dim2 a - 1 do
             fprintf ppf "%f;\t" a.{i,j}
           done
         done;
         fprintf ppf "@]@\n|]"
       
       let _ =
         let ar = Array2.of_array float32 c_layout [|[|1.; 2.|]; [|3.; 4.|]|] in
         printf "%a@\n" print2d ar;;

       [|
         1.000000;     2.000000;       
         3.000000;     4.000000;       
       |]
       val print2d : Format.formatter -> (float, 'a, 'b) Bigarray.Array2.t -> unit =
         <fun>
            
     #+END_SRC

** Example

   #+BEGIN_SRC ocaml
     open Format
     let rec pp_list_aux sep pp_element ppf = function
       | [h] -> fprintf ppf "%a" pp_element h
       | h::t -> begin
                 fprintf ppf "%a%s@,%a" pp_element h sep (pp_list_aux sep pp_element) t 
               end 
       | [] ->()
     
     let pp_list ?(sep=",") pp_element ppf xs  =
       fprintf ppf "@[<v 1>[@,%a@,]@]" (pp_list_aux sep pp_element) xs        
     
     let pretty_decl ppf (name,l) =
       fprintf ppf "@[<hv 4>%s{" name;
       List.iter (fun instr -> fprintf ppf "@ %s;" instr) l;
       fprintf ppf "@;<1 -4>}@]"
     
     let _ = pretty_decl std_formatter
                         ("haha",
                          ["a very long name";
                           "b v shogsohgso ohgos";
                           "b v shogsohgso ohgos";                                  
                           "c";
                           "b v shogsohgso ohgos";])    
                         
   #+END_SRC

   
* Formatter

  - =str_formatter=
    output to =stdbuf=, using =flush_str_formatter=
    
    #+BEGIN_SRC ocaml
      let s =
       Format.fprintf str_formatter "Test: %a@." fmt_foo Foo;
       Format.flush_str_formatter ();;
      val s : string = "Test: Foo\n"    
    #+END_SRC
    
  - =flush_str_formatter=

  - =make_formatter=

  - =err_formatter=

  - =std_formatter=


* Escape

  #+BEGIN_EXAMPLE
  %@ ==> @
  @% ==> %
  #+END_EXAMPLE
* Magic
  First of all, the typechecker has an extra rule for strings: the
  auxiliary rule states that if the typechecking context needs to
  consider a *string constant* as a value of type *('a, 'b, 'c)
  format* then this is not considered as an error.  Furthermore the
  typechecker *analyses the contents of the constant format strings* to
  find out what can be the types of the arguments of printf. For
  instance:

  #+BEGIN_SRC ocaml
    # ("" : ('a, 'b, 'c) format);;
    - : ('a, 'b, 'a) format = <abstr>
    
    # let fmt = ("print an int: %i" : ('a, 'b, 'c) format);;
    val fmt : (int -> 'a, 'b, 'a) format = <abstr>
  #+END_SRC


  In case of an application of printf the typechecker unifies the result
  type of the application to the one specified by the given format
  string (unit in the case of format for printf, string in the case of
  format for sprintf).

  #+BEGIN_SRC ocaml
    # let f i = Printf.fprintf stdout fmt i;;
    val f : int -> unit = <fun>
    # f 3;;
    print an int: 3- : unit = ()
  #+END_SRC

  You have to be careful with partial applications of printf-like
  functions to format strings, since those applications are really
  partial applications! (Meaning that *side-effects* may happen at
  *each* new argument passed to the function)!

  For instance, the format ~"print an int: %i"~, is in some sense
  equivalent to the functional expression:

  #+BEGIN_SRC ocaml
  print_string "print an int: "; function i -> print_int i  
  #+END_SRC


  More generally, a *('a, 'b, 'c) format* string value applied to a
  printf like function means that:
  
    - the resulting function will *accept arguments* with type 'a
  
    - embedded *%a applications* will accept values of type *b* as
      first argument

    - the resulting function will return values of *type c*

*** Format Examples

    #+BEGIN_SRC ocaml
      # Printf.sprintf;;
      - : ('a, unit, string) format -> 'a = <fun>
      
      # Printf.sprintf "%a";;       
      - : (unit -> '_a -> string) -> '_a -> string = <fun>
      
      # Printf.fprintf;;
      - : out_channel -> ('a, out_channel, unit) format -> 'a = <fun>
      
      # Printf.fprintf stdout "%a";;
      - : (out_channel -> '_a -> unit) -> '_a -> unit = <fun>
    #+END_SRC

    As you can see, embedded function calls must have the same 'b and
    'c parameters as the format they are called from (meaning that since
    Printf.fprintf stdout takes a ('a, out_channel, unit) format as format
    string, it can only accept %a convertion specifications with functions
    f having type *out_channel -> 'a -> unit*).

    

    #+BEGIN_SRC ocaml
      
      type xml = Elt of string * xml list | Pcdata of string
      
      let pp = Format.fprintf
      
      let rec print_elt f =
       function
       | Elt (tag, contents) ->
           pp f "@[<hv0>@[<hv2><%s>@,%a@]@,</%s>@]"
             tag print_list_elts contents tag
       | Pcdata s ->
           Format.pp_print_string f s
      
      and print_list_elts f =
         let rec loop =
           function
           | [] -> ()
           | x::xs -> (pp f "@,"; print_elt f x; loop xs) in
         function
         | [] -> ()
         | [x] -> print_elt f x
         | x::xs -> (print_elt f x; loop xs)
      
      let tree =
       Elt ("div", [
          Elt ("p", [Pcdata "a short text"]);
          Elt ("p", [Pcdata "a
      looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong
      text"])
       ])
      
      let () = Format.printf "%a@." print_elt tree 
    #+END_SRC
