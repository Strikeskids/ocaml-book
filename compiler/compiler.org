#+OPTIONS: ^:{}

* libraries

#+INCLUDE: ./utils.org
#+INCLUDE: ./parsing.org  
#+INCLUDE: ./typing.org
#+INCLUDE: ./bytecomp.org  
#+INCLUDE: ./driver.org
#+INCLUDE: ./toplevel.org
#+INCLUDE: ./pipeline.org
  
** tools
*** [[file:~/camlp4/src/Pprintast.ml][parsing:pprint]]
    
    Write a pretty printer for the parsetree will help us understand
    parsetree much better.
    Some interesting functions
    #+BEGIN_SRC ocaml
      val fmt_longident : Format.formatter -> Longident.t Location.loc -> unit
    #+END_SRC
**** understand each branch
***** signature_item_desc
      - Psig_value
        =Psig_value of string loc * value_description=
        In =asttypes.ml= there's type definition for =loc=

        #+BEGIN_SRC tuareg
          type 'a loc = 'a Location.loc = {
            txt : 'a;
            loc : Location.t;
          }
        #+END_SRC

        So, it is pretty easy to understand the first field, we have a
        simple example here:
        
        #+BEGIN_SRC tuareg
          interface_of_string "val m: int " ;;
          - : Parsetree.signature =
          [{Parsetree.psig_desc =
             Parsetree.Psig_value ({Asttypes.txt = "m"; loc = },
              {Parsetree.pval_type =
                {Parsetree.ptyp_desc =
                  Parsetree.Ptyp_constr
                   ({Asttypes.txt = Longident.Lident "int"; loc = }, []);
                 ptyp_loc = };
               pval_prim = []; pval_loc = });
            psig_loc = }]
        #+END_SRC
        
        The printer is defined this way:

        #+BEGIN_SRC tuareg -n -r
          | Psig_value (s, vd) ->
            let intro = if vd.pval_prim = [] then "val" else "external" in
            pp_open_hovbox ppf indent ;
            if (is_infix (fixity_of_string s.txt))
              || List.mem s.txt.[0] prefix_symbols then
              fprintf ppf "%s ( %s ) :@ "
                intro s.txt                (* OXX done *)
            else
              fprintf ppf "%s %s :@ " intro s.txt;
            value_description ppf vd;
            pp_close_box ppf () ;
        #+END_SRC
        
***** value_description


      #+BEGIN_SRC tuareg
        and value_description = {
          pval_type: core_type;
          pval_prim: string list;
          pval_loc : Location.t
        }
      #+END_SRC

      =pval_prim= describes whether it's external c-bindings or not. 
      

***** core_type

      #+BEGIN_SRC tuareg -n -r 
        type core_type =
          { ptyp_desc: core_type_desc;
            ptyp_loc: Location.t }     
      #+END_SRC
***** core_type_desc

      #+BEGIN_SRC tuareg -n -r
        and core_type_desc =
          Ptyp_any
        | Ptyp_var of string
        | Ptyp_arrow of label * core_type * core_type
        | Ptyp_tuple of core_type list
        | Ptyp_constr of Longident.t loc * core_type list
        | Ptyp_object of core_field_type list
        | Ptyp_class of Longident.t loc * core_type list * label list
        | Ptyp_alias of core_type * string
        | Ptyp_variant of row_field list * bool * label list option
        | Ptyp_poly of string list * core_type
        | Ptyp_package of package_type
      #+END_SRC

      - Ptyp_constr
      - Ptyp_var 
        
        #+BEGIN_SRC tuareg
          {ptyp_desc =
              Ptyp_constr
                ({Asttypes.txt =
                    Longident.Ldot (Longident.Lident "M", "option");
                  loc = },
                 [{ptyp_desc = Ptyp_var "a"; ptyp_loc = }]);
           ptyp_loc = }       
        #+END_SRC
        
***** structure
      #+BEGIN_SRC tuareg
      and structure = structure_item list
      #+END_SRC

***** structure_item


      #+BEGIN_SRC tuareg
        and structure_item ={
                 pstr_desc: structure_item_desc;
                 pstr_loc: Location.t
               }
      #+END_SRC
      
***** structure_item_desc
      #+BEGIN_SRC tuareg
        and structure_item_desc =
            Pstr_eval of expression
          | Pstr_value of rec_flag * (pattern * expression) list
          | Pstr_primitive of string loc * value_description
          | Pstr_type of (string loc * type_declaration) list
          | Pstr_exception of string loc * exception_declaration
          | Pstr_exn_rebind of string loc * Longident.t loc
          | Pstr_module of string loc * module_expr
          | Pstr_recmodule of (string loc * module_type * module_expr) list
          | Pstr_modtype of string loc * module_type
          | Pstr_open of Longident.t loc
          | Pstr_class of class_declaration list
          | Pstr_class_type of class_type_declaration list
          | Pstr_include of module_expr
      #+END_SRC
      - Pstr_module of string loc * module_expr
        #+BEGIN_SRC tuareg
        module C = ...
        #+END_SRC
      - Pstr_modtype of string loc * module_type 
        #+BEGIN_SRC tuareg
          module type S = sig
          end
        #+END_SRC
      - Pstr_class of class_declaration list 


***** class_declaration
      #+BEGIN_SRC tuareg
        and class_declaration = class_expr class_infos     
      #+END_SRC

***** class_expr
      #+BEGIN_SRC tuareg
        and class_expr =
          { pcl_desc: class_expr_desc;
            pcl_loc: Location.t }
      #+END_SRC
***** module_expr
      #+BEGIN_SRC tuareg
        and module_expr =
          { pmod_desc: module_expr_desc;
            pmod_loc: Location.t }
      #+END_SRC
      
***** module_expr_desc
      #+BEGIN_SRC tuareg
        and module_expr_desc =
            Pmod_ident of Longident.t loc
          | Pmod_structure of structure
          | Pmod_functor of string loc * module_type * module_expr
          | Pmod_apply of module_expr * module_expr
          | Pmod_constraint of module_expr * module_type
          | Pmod_unpack of expression
      #+END_SRC

      - Pmod_constraint of module_expr * module_type 
        
        One example 
        
        #+BEGIN_SRC tuareg
          "module  C : A with type 'a option = 'a M.option = U" |> implementation_of_string ;;
          - : Parsetree.structure =
          [{pstr_desc =
             Pstr_module ({Asttypes.txt = "C"; loc = },
              {pmod_desc =
                Pmod_constraint
                 ({pmod_desc = Pmod_ident {Asttypes.txt = Longident.Lident "U"; loc = };
                   pmod_loc = },
                 {pmty_desc =
                   Pmty_with
                    ({pmty_desc =
                       Pmty_ident {Asttypes.txt = Longident.Lident "A"; loc = };
                      pmty_loc = },
                    [({Asttypes.txt = Longident.Lident "option"; loc = },
                      Pwith_type
                       {ptype_params = [Some {Asttypes.txt = "a"; loc = }];
                        ptype_cstrs = []; ptype_kind = Ptype_abstract;
                        ptype_private = Public;
                        ptype_manifest =
                         Some
                          {ptyp_desc =
                            Ptyp_constr
                             ({Asttypes.txt =
                                Longident.Ldot (Longident.Lident "M", "option");
                               loc = },
                             [{ptyp_desc = Ptyp_var "a"; ptyp_loc = }]);
                           ptyp_loc = };
                        ptype_variance = [(false, false)]; ptype_loc = })]);
                  pmty_loc = });
               pmod_loc = });
            pstr_loc = }]
        #+END_SRC


***** module_type

      #+BEGIN_SRC tuareg
        and module_type =
          { pmty_desc: module_type_desc;
            pmty_loc: Location.t }
      #+END_SRC

***** module_type_desc

      #+BEGIN_SRC tuareg
        and module_type_desc =
            Pmty_ident of Longident.t loc
          | Pmty_signature of signature
          | Pmty_functor of string loc * module_type * module_type
          | Pmty_with of module_type * (Longident.t loc * with_constraint) list
          | Pmty_typeof of module_expr
      #+END_SRC

      - Pmty_with of module_type * (Longident.t loc * with_constraint) list
        list

      - Pmty_idnet 
        #+BEGIN_SRC tuareg
        {pmty_desc =
              Pmty_ident {Asttypes.txt = Longident.Lident "A"; loc = };
             pmty_loc = }
        #+END_SRC

      - Pmty_signature of signature

***** with_constraint

      #+BEGIN_SRC tuareg
        and with_constraint =
            Pwith_type of type_declaration
          | Pwith_module of Longident.t loc
          | Pwith_typesubst of type_declaration
          | Pwith_modsubst of Longident.t loc
      #+END_SRC

      - Pwith_type

***** type_declaration

      #+BEGIN_SRC tuareg
        and type_declaration =
          { ptype_params: string loc option list;
            ptype_cstrs: (core_type * core_type * Location.t) list;
            ptype_kind: type_kind;
            ptype_private: private_flag;
            ptype_manifest: core_type option;
            ptype_variance: (bool * bool) list;
            ptype_loc: Location.t }
      #+END_SRC



***** signature
      #+BEGIN_SRC tuareg
        and signature = signature_item list
      #+END_SRC

***** signature_item
      #+BEGIN_SRC tuareg
        and signature_item =
          { psig_desc: signature_item_desc;
            psig_loc: Location.t }
      #+END_SRC
      
***** signature_item_desc
      #+BEGIN_SRC tuareg
        and signature_item_desc =
            Psig_value of string loc * value_description
          | Psig_type of (string loc * type_declaration) list
          | Psig_exception of string loc * exception_declaration
          | Psig_module of string loc * module_type
          | Psig_recmodule of (string loc * module_type) list
          | Psig_modtype of string loc * modtype_declaration
          | Psig_open of Longident.t loc
          | Psig_include of module_type
          | Psig_class of class_description list
          | Psig_class_type of class_type_declaration list
      #+END_SRC

      - Psig_class of class_description list


***** class_description
      #+BEGIN_SRC tuareg
        and class_description = class_type class_infos     
      #+END_SRC
***** class_type
      #+BEGIN_SRC tuareg
        and class_type =
          { pcty_desc: class_type_desc;
            pcty_loc: Location.t }
      #+END_SRC
      

***** class_type_desc
      #+BEGIN_SRC tuareg
        and class_type_desc =
            Pcty_constr of Longident.t loc * core_type list
          | Pcty_signature of class_signature
          | Pcty_fun of label * core_type * class_type
      #+END_SRC

      - Pcty_fun of label * core_type * class_type
***** class_expr_desc
      #+BEGIN_SRC tuareg
        and class_expr_desc =
            Pcl_constr of Longident.t loc * core_type list
          | Pcl_structure of class_structure
          | Pcl_fun of label * expression option * pattern * class_expr
          | Pcl_apply of class_expr * (label * expression) list
          | Pcl_let of rec_flag * (pattern * expression) list * class_expr
          | Pcl_constraint of class_expr * class_type
      #+END_SRC
      - Pcl_fun of label * expression option * pattern * class_expr 

***** class_infos
      #+BEGIN_SRC tuareg
        type 'a class_infos =
          { pci_virt: virtual_flag;
            pci_params: string loc list * Location.t;
            pci_name: string loc;
            pci_expr: 'a;
            pci_variance: (bool * bool) list;
            pci_loc: Location.t }
      #+END_SRC   



** yacc
   ocamlyacc is simply a yacc but with ocaml backend
*** building log
    #+BEGIN_SRC shell-script
      cd yacc; make all
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o closure.o closure.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o error.o error.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o lalr.o lalr.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o lr0.o lr0.c
      echo "#define OCAML_VERSION \"`sed -e 1q ../VERSION`\"" >version.h
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o main.o main.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o mkpar.o mkpar.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o output.o output.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o reader.o reader.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o skeleton.o skeleton.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o symtab.o symtab.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o verbose.o verbose.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT   -c -o warshall.o warshall.c
      gcc -O -DNDEBUG -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT  -o ocamlyacc closure.o error.o lalr.o lr0.o main.o mkpar.o output.o reader.o skeleton.o symtab.o verbose.o warshall.o    
    #+END_SRC
*** [[file:~/ocaml-svn/yacc/reader.c][yacc:reader]]
** lex
** stdlib
*** [[file:~/ocaml-svn/stdlib/parsing.ml][stdlib:parsing]]
    The run-time library for parsers generated by [ocamlyacc].
#+INCLUDE ./libraries.org
