#+OPTIONS: ^:{}

** bytecomp
   When we get =typedtree= output, we will compile it to byte code.
   module =Lambda= defines the intermediate language. module =Typeopt=
   introduced some type-based optimizations.  module =Bytegen= defines
   generation of bytecode from lambda terms. module =Emitcode= defined
   generation of bytecode for =cmo= files.


*** [[file:~/ocaml-svn/bytecomp/lambda.ml][bytecomp/lambda]]
**** dependency
**** content
     The "lambda" intermediate code     

***** type
      #+BEGIN_SRC ocaml (* compile_time_constant *)
        type compile_time_constant =
          | Big_endian
          | Word_size
          | Ostype_unix
          | Ostype_win32
          | Ostype_cygwin
              
      #+END_SRC

      #+BEGIN_SRC ocaml (* primitive *)
        type primitive =
            Pidentity
          | Pignore
          | Prevapply of Location.t
          | Pdirapply of Location.t
            (* Globals *)
          | Pgetglobal of Ident.t
          | Psetglobal of Ident.t
          (* Operations on heap blocks *)
          | Pmakeblock of int * mutable_flag
          | Pfield of int
          | Psetfield of int * bool
          | Pfloatfield of int
          | Psetfloatfield of int
          | Pduprecord of Types.record_representation * int
          (* Force lazy values *)
          | Plazyforce
          (* External call *)
          | Pccall of Primitive.description
          (* Exceptions *)
          | Praise
          (* Boolean operations *)
          | Psequand | Psequor | Pnot
          (* Integer operations *)
          | Pnegint | Paddint | Psubint | Pmulint | Pdivint | Pmodint
          | Pandint | Porint | Pxorint
          | Plslint | Plsrint | Pasrint
          | Pintcomp of comparison
          | Poffsetint of int
          | Poffsetref of int
          (* Float operations *)
          | Pintoffloat | Pfloatofint
          | Pnegfloat | Pabsfloat
          | Paddfloat | Psubfloat | Pmulfloat | Pdivfloat
          | Pfloatcomp of comparison
          (* String operations *)
          | Pstringlength | Pstringrefu | Pstringsetu | Pstringrefs | Pstringsets
          (* Array operations *)
          | Pmakearray of array_kind
          | Parraylength of array_kind
          | Parrayrefu of array_kind
          | Parraysetu of array_kind
          | Parrayrefs of array_kind
          | Parraysets of array_kind
          (* Test if the argument is a block or an immediate integer *)
          | Pisint
          (* Test if the (integer) argument is outside an interval *)
          | Pisout
          (* Bitvect operations *)
          | Pbittest
          (* Operations on boxed integers (Nativeint.t, Int32.t, Int64.t) *)
          | Pbintofint of boxed_integer
          | Pintofbint of boxed_integer
          | Pcvtbint of boxed_integer (*source*) * boxed_integer (*destination*)
          | Pnegbint of boxed_integer
          | Paddbint of boxed_integer
          | Psubbint of boxed_integer
          | Pmulbint of boxed_integer
          | Pdivbint of boxed_integer
          | Pmodbint of boxed_integer
          | Pandbint of boxed_integer
          | Porbint of boxed_integer
          | Pxorbint of boxed_integer
          | Plslbint of boxed_integer
          | Plsrbint of boxed_integer
          | Pasrbint of boxed_integer
          | Pbintcomp of boxed_integer * comparison
          (* Operations on big arrays: (unsafe, #dimensions, kind, layout) *)
          | Pbigarrayref of bool * int * bigarray_kind * bigarray_layout
          | Pbigarrayset of bool * int * bigarray_kind * bigarray_layout
          (* size of the nth dimension of a big array *)
          | Pbigarraydim of int
          (* load/set 16,32,64 bits from a string: (unsafe)*)
          | Pstring_load_16 of bool
          | Pstring_load_32 of bool
          | Pstring_load_64 of bool
          | Pstring_set_16 of bool
          | Pstring_set_32 of bool
          | Pstring_set_64 of bool
          (* load/set 16,32,64 bits from a
             (char, int8_unsigned_elt, c_layout) Bigarray.Array1.t : (unsafe) *)
          | Pbigstring_load_16 of bool
          | Pbigstring_load_32 of bool
          | Pbigstring_load_64 of bool
          | Pbigstring_set_16 of bool
          | Pbigstring_set_32 of bool
          | Pbigstring_set_64 of bool
          (* Compile time constants *)
          | Pctconst of compile_time_constant
          (* byte swap *)
          | Pbswap16
          | Pbbswap of boxed_integer
        
      #+END_SRC

      #+BEGIN_SRC ocaml (* comparison *)
        and comparison =
          Ceq | Cneq | Clt | Cgt | Cle | Cge
      #+END_SRC

      #+BEGIN_SRC ocaml
        (* array_kind, boxed_integer, bigarray_kind, bigarray_layout structured_constant*)
        and array_kind =
            Pgenarray | Paddrarray | Pintarray | Pfloatarray
        
        and boxed_integer =
            Pnativeint | Pint32 | Pint64
        
        and bigarray_kind =
            Pbigarray_unknown
          | Pbigarray_float32 | Pbigarray_float64
          | Pbigarray_sint8 | Pbigarray_uint8
          | Pbigarray_sint16 | Pbigarray_uint16
          | Pbigarray_int32 | Pbigarray_int64
          | Pbigarray_caml_int | Pbigarray_native_int
          | Pbigarray_complex32 | Pbigarray_complex64
        
        and bigarray_layout =
            Pbigarray_unknown_layout
          | Pbigarray_c_layout
          | Pbigarray_fortran_layout
        
        type structured_constant =
            Const_base of constant
          | Const_pointer of int
          | Const_block of int * structured_constant list
          | Const_float_array of string list
          | Const_immstring of string
      #+END_SRC

      #+BEGIN_SRC ocaml
        type function_kind = Curried | Tupled
        
        type let_kind = Strict | Alias | StrictOpt | Variable
        (* Meaning of kinds for let x = e in e':
            Strict: e may have side-effets; always evaluate e first
              (If e is a simple expression, e.g. a variable or constant,
               we may still substitute e'[x/e].)
            Alias: e is pure, we can substitute e'[x/e] if x has 0 or 1 occurrences
              in e'
            StrictOpt: e does not have side-effects, but depend on the store;
              we can discard e if x does not appear in e'
            Variable: the variable x is assigned later in e' *)
        
        type meth_kind = Self | Public | Cached
        
        type shared_code = (int * int) list     (* stack size -> code label *)
      #+END_SRC

      #+BEGIN_SRC ocaml
        type lambda =
            Lvar of Ident.t
          | Lconst of structured_constant
          | Lapply of lambda * lambda list * Location.t
          | Lfunction of function_kind * Ident.t list * lambda
          | Llet of let_kind * Ident.t * lambda * lambda
          | Lletrec of (Ident.t * lambda) list * lambda
          | Lprim of primitive * lambda list
          | Lswitch of lambda * lambda_switch
          | Lstaticraise of int * lambda list
          | Lstaticcatch of lambda * (int * Ident.t list) * lambda
          | Ltrywith of lambda * Ident.t * lambda
          | Lifthenelse of lambda * lambda * lambda
          | Lsequence of lambda * lambda
          | Lwhile of lambda * lambda
          | Lfor of Ident.t * lambda * lambda * direction_flag * lambda
          | Lassign of Ident.t * lambda
          | Lsend of meth_kind * lambda * lambda * lambda list * Location.t
          | Levent of lambda * lambda_event
          | Lifused of Ident.t * lambda
        and lambda_switch =
          { sw_numconsts: int;                  (* Number of integer cases *)
            sw_consts: (int * lambda) list;     (* Integer cases *)
            sw_numblocks: int;                  (* Number of tag block cases *)
            sw_blocks: (int * lambda) list;     (* Tag block cases *)
            sw_failaction : lambda option}      (* Action to take if failure *)
        and lambda_event =
          { lev_loc: Location.t;
            lev_kind: lambda_event_kind;
            lev_repr: int ref option;
            lev_env: Env.summary }
        and lambda_event_kind =
            Lev_before
          | Lev_after of Types.type_expr
          | Lev_function
      #+END_SRC
      
***** value 
      #+BEGIN_SRC ocaml
        val same: lambda -> lambda -> bool
        val const_unit: structured_constant
        val lambda_unit: lambda
        val name_lambda: lambda -> (Ident.t -> lambda) -> lambda
        val name_lambda_list: lambda list -> (lambda list -> lambda) -> lambda
        val iter: (lambda -> unit) -> lambda -> unit
        module IdentSet: Set.S with type elt = Ident.t
        val free_variables: lambda -> IdentSet.t
        val free_methods: lambda -> IdentSet.t
        val transl_path: Path.t -> lambda
        val make_sequence: ('a -> lambda) -> 'a list -> lambda
        val subst_lambda: lambda Ident.tbl -> lambda -> lambda
        val bind : let_kind -> Ident.t -> lambda -> lambda -> lambda
      #+END_SRC

      #+BEGIN_SRC ocaml
      val transl_path: Path.t -> lambda
      #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/simplif.ml][bytecomp/simplif]]
    

**** dependency
     #+BEGIN_EXAMPLE
     labmda
     #+END_EXAMPLE

**** content 
     A module eliminate useless Llet(alias) bindings., also transform
     let-bound references into variables
    #+BEGIN_SRC ocaml
      val simplify_lambda : Lambda.lambda -> Lambda.lambda
      val is_tail_native_heuristic : ref (int -> bool)
    #+END_SRC


*** [[file:~/ocaml-svn/bytecomp/switch.ml][bytecomp/switch]]
    

**** dependency
     

**** content
     Transforms generic switches in combinations of if tests and switches

*** [[file:~/ocaml-svn/bytecomp/typeopt.ml][bytecomp/typeopt]]
**** dependency
     #+BEGIN_EXAMPLE
     lambda 
     #+END_EXAMPLE
**** content
    Auxiliaries for type-based optimizations, e.g. array kinds

***** value
      #+BEGIN_SRC ocaml
        val has_base_type : Typedtree.expression -> Path.t -> bool
        val maybe_pointer : Typedtree.expression -> bool
        val array_kind : Typedtree.expression -> Lambda.array_kind
        val array_pattern_kind : Typedtree.pattern -> Lambda.array_kind
        val bigarray_kind_and_layout :
              Typedtree.expression -> Lambda.bigarray_kind * Lambda.bigarray_layout
      #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/printlambda.ml][bytecomp/printlambda]]
**** dependency
     #+BEGIN_EXAMPLE
     lambda
     #+END_EXAMPLE
**** content
    pretty print lambda

    #+BEGIN_SRC ocaml
      val structured_constant: formatter -> structured_constant -> unit
      val lambda: formatter -> lambda -> unit
      val primitive: formatter -> primitive -> unit
    #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/instruct.ml][bytecomp/instruct]]

**** dependency
     #+BEGIN_SRC ocaml
       type instruction =
           Klabel of label
         | Kacc of int
         | Kenvacc of int
         | Kpush
         | Kpop of int
         | Kassign of int
         | Kpush_retaddr of label
         | Kapply of int                       (* number of arguments *)
         | Kappterm of int * int               (* number of arguments, slot size *)
         | Kreturn of int                      (* slot size *)
         | Krestart
         | Kgrab of int                        (* number of arguments *)
         | Kclosure of label * int
         | Kclosurerec of label list * int
         | Koffsetclosure of int
         | Kgetglobal of Ident.t
         | Ksetglobal of Ident.t
         | Kconst of structured_constant
         | Kmakeblock of int * int             (* size, tag *)
         | Kmakefloatblock of int
         | Kgetfield of int
         | Ksetfield of int
         | Kgetfloatfield of int
         | Ksetfloatfield of int
         | Kvectlength
         | Kgetvectitem
         | Ksetvectitem
         | Kgetstringchar
         | Ksetstringchar
         | Kbranch of label
         | Kbranchif of label
         | Kbranchifnot of label
         | Kstrictbranchif of label
         | Kstrictbranchifnot of label
         | Kswitch of label array * label array
         | Kboolnot
         | Kpushtrap of label
         | Kpoptrap
         | Kraise
         | Kcheck_signals
         | Kccall of string * int
         | Knegint | Kaddint | Ksubint | Kmulint | Kdivint | Kmodint
         | Kandint | Korint | Kxorint | Klslint | Klsrint | Kasrint
         | Kintcomp of comparison
         | Koffsetint of int
         | Koffsetref of int
         | Kisint
         | Kisout
         | Kgetmethod
         | Kgetpubmet of int
         | Kgetdynmet
         | Kevent of debug_event
         | Kstop
            
     #+END_SRC
**** content
     The type of the instructions of the abstract machine

*** [[file:~/ocaml-svn/bytecomp/printinstr.ml][bytecomp/printinstr]]
**** dependency
     #+BEGIN_EXAMPLE
     lambda instruct 
     #+END_EXAMPLE
**** content 
    Pretty-print lists of instructions
***** value
      #+BEGIN_SRC ocaml
        val instruction: formatter -> instruction -> unit
        val instrlist: formatter -> instruction list -> unit
      #+END_SRC


    
*** [[file:~/ocaml-svn/bytecomp/bytegen.ml][bytecomp/bytegen]]
**** dependency
     #+BEGIN_EXAMPLE
     lambda instruct switch
     #+END_EXAMPLE
**** content
     A module translate =lambda terms= to lists of instructions
***** type
      #+BEGIN_SRC ocaml
        type function_to_compile =
          { params: Ident.t list;               (* function parameters *)
            body: lambda;                       (* the function body *)
            label: label;                       (* the label of the function entry *)
            free_vars: Ident.t list;            (* free variables of the function *)
            num_defs: int;            (* number of mutually recursive definitions *)
            rec_vars: Ident.t list;             (* mutually recursive fn names *)
            rec_pos: int }                      (* rank in recursive definition *)
      #+END_SRC
***** value
      
     #+BEGIN_SRC ocaml
       val compile_implementation: string -> lambda -> instruction list
       (* the first argument is a module name *)
       val compile_phrase: lambda -> instruction list * instruction list
       (* return (init_code,fun_code0 as a tuple *)
     #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/matching.ml][bytecomp/matching]]
**** dependency
     #+BEGIN_EXAMPLE
     switch printlambda typeopt
     #+END_EXAMPLE
**** content
    Compilation of pattern-matching, still does the lambda
    transformation.
    
***** value  
     #+BEGIN_SRC ocaml
       val for_function:
               Location.t -> int ref option -> lambda -> (pattern * lambda) list ->
               partial -> lambda
       val for_trywith:
               lambda -> (pattern * lambda) list -> lambda
       val for_let:
               Location.t -> lambda -> pattern -> lambda -> lambda
       val for_multiple_match:
               Location.t -> lambda list -> (pattern * lambda) list -> partial ->
               lambda
       
       val for_tupled_function:
               Location.t -> Ident.t list -> (pattern list * lambda) list ->
               partial -> lambda
     #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/translobj.ml][bytecomp/translobj]]
**** dependency
     #+BEGIN_EXAMPLE
     lambda 
     #+END_EXAMPLE
**** content
     lambda transformation for the oo part 

*** [[file:~/ocaml-svn/bytecomp/translcore.ml][bytecomp/translcore]]

**** dependency
     #+BEGIN_EXAMPLE
     typecore translobj matching lambda 
     #+END_EXAMPLE
**** content 
     Translation from *typed tree* to *lambda terms*, for the
     core language
     
***** value
      #+BEGIN_SRC ocaml
        val transl_exp: expression -> lambda
      #+END_SRC

      #+BEGIN_SRC ocaml
        (* Forward declaration -- to be filled in by Translmod.transl_module *)
        val transl_module :
              (module_coercion -> Path.t option -> module_expr -> lambda) ref
        val transl_object :
              (Ident.t -> string list -> class_expr -> lambda) ref
              
      #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/translclass.ml][bytecomp/translclass]]

    #+BEGIN_SRC ocaml
      val transl_class :
        Ident.t list -> Ident.t ->
        string list -> Typedtree.class_expr -> Asttypes.virtual_flag -> lambda
    #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/translmod.ml][bytecomp:translmod]]

**** dependency
     #+BEGIN_EXAMPLE
     translcore translclass translobj
     #+END_EXAMPLE

**** content
    A module which translate typedtree to lamda terms

***** value 

      #+BEGIN_SRC ocaml
        val transl_toplevel_definition: structure -> lambda
        val transl_implementation: string -> structure * module_coercion -> lambda
      #+END_SRC


*** [[file:~/ocaml-svn/bytecomp/meta.ml][bytecomp/meta]]
**** dependency
     
**** content
     A module to control the runtime system and bytecode interpreter.
     It was written in C language.
***** value
      #+BEGIN_SRC ocaml
        external global_data : unit -> Obj.t array = "caml_get_global_data"
        external realloc_global_data : int -> unit = "caml_realloc_global"
        external static_alloc : int -> string = "caml_static_alloc"
        external static_free : string -> unit = "caml_static_free"
        external static_release_bytecode : string -> int -> unit
                                         = "caml_static_release_bytecode"
        external static_resize : string -> int -> string = "caml_static_resize"
        type closure = unit -> Obj.t
        external reify_bytecode : string -> int -> closure = "caml_reify_bytecode"
        external invoke_traced_function : Obj.t -> Obj.t -> Obj.t -> Obj.t
                                        = "caml_invoke_traced_function"
        external get_section_table : unit -> (string * Obj.t) list
                                   = "caml_get_section_table"
              
      #+END_SRC
    
*** [[file:~/ocaml-svn/bytecomp/runtimedef.ml][bytecomp/runtimedef]]
**** dependency

**** content
      Values and functions known and/or provided by the runtime system
***** value
       #+BEGIN_SRC ocaml
         val builtin_exceptions: string array
         val builtin_primitives: string array
       #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/dll.ml][bytecomp/dll]]
**** dependency

**** content
     Handling of dynamically-linked libraries

***** value
      #+BEGIN_SRC ocaml
        let init_toplevel dllpath =
          search_path :=
            ld_library_path_contents() @
            split_dll_path dllpath @
            ld_conf_contents();
          opened_dlls := Array.to_list (get_current_dlls());
          names_of_opened_dlls := [];
          linking_in_core := true
      #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/bytesections.ml][bytecomp/bytesections]]
    Handling of sections in bytecode executable files

*** [[file:~/ocaml-svn/bytecomp/cmo_format.mli][bytecomp/cmo_format]]

**** content
     layout of the cmofile 
     #+BEGIN_SRC ocaml
       (* Descriptor for compilation units *)
       
       type compilation_unit =
         { cu_name: string;                    (* Name of compilation unit *)
           mutable cu_pos: int;                (* Absolute position in file *)
           cu_codesize: int;                   (* Size of code block *)
           cu_reloc: (reloc_info * int) list;  (* Relocation information *)
           cu_imports: (string * Digest.t) list; (* Names and CRC of intfs imported *)
           cu_primitives: string list;         (* Primitives declared inside *)
           mutable cu_force_link: bool;        (* Must be linked even if unref'ed *)
           mutable cu_debug: int;              (* Position of debugging info, or 0 *)
           cu_debugsize: int }                 (* Length of debugging info *)
       
       (* Format of a .cmo file:
            magic number (Config.cmo_magic_number)
            absolute offset of compilation unit descriptor
            block of relocatable bytecode
            debugging information if any
            compilation unit descriptor *)
       
       (* Descriptor for libraries *)
       
       type library =
         { lib_units: compilation_unit list;   (* List of compilation units *)
           lib_custom: bool;                   (* Requires custom mode linking? *)
           lib_ccobjs: string list;            (* C object files needed for -custom *)
           lib_ccopts: string list;            (* Extra opts to C compiler *)
           lib_dllibs: string list }           (* DLLs needed *)
       
       (* Format of a .cma file:
            magic number (Config.cma_magic_number)
            absolute offset of library descriptor
            object code for first library member
            ...
            object code for last library member
            library descriptor *)
            
     #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/symtable.ml][bytecomp:symtable]]

**** dependency
     #+BEGIN_EXAMPLE
     bytesections Cmo_format Dll Lambda meta Runtimedef lambda
     #+END_EXAMPLE

**** content
    Assign locations and numbers to globals and primitives
***** value

      #+BEGIN_SRC ocaml
       val get_global_value : Ident.t -> Obj.t
       val init_toplevel: unit -> (string * Digest.t) list
      #+END_SRC

      #+BEGIN_SRC ocaml
        val init_toplevel: unit -> (string * Digest.t) list
        val current_state: unit -> global_map                                               
      #+END_SRC

*** [[file:~/ocaml-svn/bytecomp/opcodes.ml][bytecomp/opcodes]]

*** [[file:~/ocaml-svn/bytecomp/emitcode.ml][bytecomp/emitcode]]

**** dependency
     #+BEGIN_EXAMPLE
     opcodes translmod instruct 
     #+END_EXAMPLE

**** content 
     Generation of bytecode + relocation information

***** value 
      #+BEGIN_SRC ocaml
        val to_file: out_channel -> string -> instruction list -> unit
                (* Arguments:
                     channel on output file
                     name of compilation unit implemented
                     list of instructions to emit *)
        val to_memory: instruction list -> instruction list ->
                            string * int * (reloc_info * int) list
                (* Arguments:
                     initialization code (terminated by STOP)
                     function code
                   Results:
                     block of relocatable bytecode
                     size of this block
                     relocation information *)
        val to_packed_file:
          out_channel -> instruction list -> (reloc_info * int) list
                (* Arguments:
                     channel on output file
                     list of instructions to emit
                   Result:
                     relocation information (reversed) *)
                                                              
      #+END_SRC
    

*** [[file:~/ocaml-svn/bytecomp/bytelink.ml][bytecomp/bytelink]]
**** dependency
     #+BEGIN_EXAMPLE
     opcodes symtable
     #+END_EXAMPLE
**** content
     #+BEGIN_SRC ocaml
       (* Link .cmo files and produce a bytecode executable. *)
       val link : Format.formatter -> string list -> string -> unit
       val check_consistency: Format.formatter -> string -> Cmo_format.compilation_unit -> unit
       
     #+END_SRC

       
*** [[file:~/ocaml-svn/bytecomp/bytelibrarian.ml][bytecomp/bytelibrarian]]
    
**** dependency 
     #+BEGIN_EXAMPLE
     bytelink
     #+END_EXAMPLE

**** content

**** value
     create a library of *cmo* files.

     #+BEGIN_SRC ocaml
       (* Format of a library file:
             magic number (Config.cma_magic_number)
             absolute offset of content table
             blocks of relocatable bytecode
             content table = list of compilation units
       ,*)
       
       val create_archive: Format.formatter -> string list -> string -> unit
     #+END_SRC


*** [[file:~/ocaml-svn/bytecomp/bytepackager.ml][bytecomp/bytepackager]]
**** dependency
     #+BEGIN_EXAMPLE
     translmod emitcode bytelink instruct bytegen
     #+END_EXAMPLE
**** content
     "Package" a set of .cmo files into one .cmo file having the
         original compilation units as sub-modules.
***** value  
    #+BEGIN_SRC ocaml
      val package_files: Format.formatter -> string list -> string -> unit
    #+END_SRC





