#+OPTIONS: ^:{}
** toplevel
*** [[file:~/ocaml-svn/toplevel/topmain.ml][toplevel:topmain]]
*** [[file:~/ocaml-svn/toplevel/toploop.ml][toplevel:toploop]]
    There are two kinds of environment, one is for =obj=:
    =Toploop.toplevel_value_bindings=, the other is for =typing=,
    =Toploop.toplevel_env=.

    #+BEGIN_SRC ocaml
      (* The table of toplevel value bindings and its accessors *)
      
      let toplevel_value_bindings =
        (Hashtbl.create 37 : (string, Obj.t) Hashtbl.t)
      
      let getvalue name =
        try
          Hashtbl.find toplevel_value_bindings name
        with Not_found ->
          fatal_error (name ^ " unbound at toplevel")
      
      let setvalue name v =
        Hashtbl.replace toplevel_value_bindings name v
    #+END_SRC
    =Toploop.eval_path= has type =Path.t -> Obj.t= which will consult
    the environment to get the object.

    #+BEGIN_SRC ocaml
      let rec eval_path = function
        | Pident id ->
            if Ident.persistent id || Ident.global id then
              Symtable.get_global_value id
            else begin
              let name = Translmod.toplevel_name id in
              try
                Hashtbl.find toplevel_value_bindings name
              with Not_found ->
                raise (Symtable.Error(Symtable.Undefined_global name))
            end
        | Pdot(p, s, pos) ->
            Obj.field (eval_path p) pos
        | Papply(p1, p2) ->
            fatal_error "Toploop.eval_path"
    #+END_SRC

    #+BEGIN_SRC ocaml
      let set_paths () =
        (* Add whatever -I options have been specified on the command line,
           but keep the directories that user code linked in with ocamlmktop
           may have added to load_path. *)
        load_path := !load_path @ [Filename.concat Config.standard_library "camlp4"];
        load_path := "" :: (List.rev !Clflags.include_dirs @ !load_path);
        Dll.add_path !load_path
    #+END_SRC

    There's a =directive_table= to config the toplevel
    #+BEGIN_SRC ocaml
      | Ptop_dir(dir_name, dir_arg) ->
          try
            match (Hashtbl.find directive_table dir_name, dir_arg) with
            | (Directive_none f, Pdir_none) -> f (); true
            | (Directive_string f, Pdir_string s) -> f s; true
            | (Directive_int f, Pdir_int n) -> f n; true
            | (Directive_ident f, Pdir_ident lid) -> f lid; true
            | (Directive_bool f, Pdir_bool b) -> f b; true
            | (_, _) ->
                fprintf ppf "Wrong type of argument for directive `%s'.@." dir_name;
                false
    #+END_SRC
*** [[file:~/ocaml-svn/toplevel/genprintval.ml][toplevel:genprintval]]
    
