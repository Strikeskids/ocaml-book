#+OPTIONS: ^:{}
** utils
   The Following list contains all modules in =utils= directory
*** [[file:~/ocaml-svn/utils/clflags.ml][utils:clflags]]
    There are a lot of custmoized flags here, which =toplevel=
    respect.  Suppose you turn on

    #+BEGIN_SRC ocaml
    Clflags.dump_rawlambda := true;;
    #+END_SRC
    The command line flags will parsed to set the flags in this module

    | Options                                                   | Comments                           |
    |-----------------------------------------------------------+------------------------------------|
    | let objfiles = ref ([] : string list)                     | (* .cmo and .cma files *)          |
    | and ccobjs = ref ([] : string list)                       | (* .o, .a, .so and -cclib -lxxx *) |
    | and dllibs = ref ([] : string list)                       | (* .so and -dllib -lxxx *)         |
    | let compile_only = ref false                              | (* -c *)                           |
    | and output_name = ref (None : string option)              | (* -o *)                           |
    | and include_dirs = ref ([] : string list)                 | (* -I *)                           |
    | and no_std_include = ref false                            | (* -nostdlib *)                    |
    | and print_types = ref false                               | (* -i *)                           |
    | and make_archive = ref false                              | (* -a *)                           |
    | and debug = ref false                                     | (* -g *)                           |
    | and fast = ref false                                      | (* -unsafe *)                      |
    | and link_everything = ref false                           | (* -linkall *)                     |
    | and custom_runtime = ref false                            | (* -custom *)                      |
    | and output_c_object = ref false                           | (* -output-obj *)                  |
    | and ccopts = ref ([] : string list)                       | (* -ccopt *)                       |
    | and classic = ref false                                   | (* -nolabels *)                    |
    | and nopervasives = ref false                              | (* -nopervasives *)                |
    | and preprocessor = ref(None : string option)              | (* -pp *)                          |
    | and ppx = ref ([] : string list)                          | (* -ppx *)                         |
    | let annotations = ref false                               | (* -annot *)                       |
    | let binary_annotations = ref false                        | (* -annot *)                       |
    | and use_threads = ref false                               | (* -thread *)                      |
    | and use_vmthreads = ref false                             | (* -vmthread *)                    |
    | and noassert = ref false                                  | (* -noassert *)                    |
    | and verbose = ref false                                   | (* -verbose *)                     |
    | and noprompt = ref false                                  | (* -noprompt *)                    |
    | and nopromptcont = ref false                              | (* -nopromptcont *)                |
    | and init_file = ref (None : string option)                | (* -init *)                        |
    | and use_prims = ref ""                                    | (* -use-prims ... *)               |
    | and use_runtime = ref ""                                  | (* -use-runtime ... *)             |
    | and principal = ref false                                 | (* -principal *)                   |
    | and recursive_types = ref false                           | (* -rectypes *)                    |
    | and strict_sequence = ref false                           | (* -strict-sequence *)             |
    | and applicative_functors = ref true                       | (* -no-app-funct *)                |
    | and make_runtime = ref false                              | (* -make-runtime *)                |
    | and gprofile = ref false                                  | (* -p *)                           |
    | and c_compiler = ref (None: string option)                | (* -cc *)                          |
    | and no_auto_link = ref false                              | (* -noautolink *)                  |
    | and dllpaths = ref ([] : string list)                     | (* -dllpath *)                     |
    | and make_package = ref false                              | (* -pack *)                        |
    | and for_package = ref (None: string option)               | (* -for-pack *)                    |
    | and error_size = ref 500                                  | (* -error-size *)                  |
    | let dump_parsetree = ref false                            | (* -dparsetree *)                  |
    | and dump_rawlambda = ref false                            | (* -drawlambda *)                  |
    | and dump_lambda = ref false                               | (* -dlambda *)                     |
    | and dump_clambda = ref false                              | (* -dclambda *)                    |
    | and dump_instr = ref false                                | (* -dinstr *)                      |
    |                                                           |                                    |
    | let keep_asm_file = ref false                             | (* -S *)                           |
    | let optimize_for_speed = ref true                         | (* -compact *)                     |
    |                                                           |                                    |
    | and dump_cmm = ref false                                  | (* -dcmm *)                        |
    | let dump_selection = ref false                            | (* -dsel *)                        |
    | let dump_live = ref false                                 | (* -dlive *)                       |
    | let dump_spill = ref false                                | (* -dspill *)                      |
    | let dump_split = ref false                                | (* -dsplit *)                      |
    | let dump_scheduling = ref false                           | (* -dscheduling *)                 |
    | let dump_interf = ref false                               | (* -dinterf *)                     |
    | let dump_prefer = ref false                               | (* -dprefer *)                     |
    | let dump_regalloc = ref false                             | (* -dalloc *)                      |
    | let dump_reload = ref false                               | (* -dreload *)                     |
    | let dump_scheduling = ref false                           | (* -dscheduling *)                 |
    | let dump_linear = ref false                               | (* -dlinear *)                     |
    | let keep_startup_file = ref false                         | (* -dstartup *)                    |
    | let dump_combine = ref false                              | (* -dcombine *)                    |
    |                                                           |                                    |
    | let native_code = ref false                               | (* set to true under ocamlopt *)   |
    | let inline_threshold = ref 10                             |                                    |
    |                                                           |                                    |
    | let dont_write_files = ref false                          | (* set to true under ocamldoc *)   |
    |                                                           |                                    |
    | let std_include_flag prefix =                             |                                    |
    | if !no_std_include then ""                                |                                    |
    | else (prefix ^ (Filename.quote Config.standard_library))  |                                    |
    | ;;                                                        |                                    |
    |                                                           |                                    |
    | let std_include_dir () =                                  |                                    |
    | if !no_std_include then [] else [Config.standard_library] |                                    |
    | ;;                                                        |                                    |
    |                                                           |                                    |
    | let shared = ref false                                    | (* -shared *)                      |
    | let dlcode = ref true                                     | (* not -nodynlink *)               |
    |                                                           |                                    |
    | let runtime_variant = ref "";;                            | (* -runtime-variant *)             |
    |-----------------------------------------------------------+------------------------------------|

    The difference between applicative functors and non-applicative
    functors is roughly:
    If you apply a functor twice with =the same input modules=, the
    opaque types for applicative functors in the output remain compatible. For instance:

    #+BEGIN_SRC ocaml
      module S1 = Set.Make(String)
      module S2 = Set.Make(String)
    #+END_SRC
    Now, =S1.t= and =S2.t= are type-compatible, although this type is opaque.
    (E.g. you can do =/S1.empty = S2.empty./=)
    Compare this with:

    #+BEGIN_SRC ocaml
      module Make(X : sig end) = struct type t = Variant end
      module M1 = Make(struct end)
      module M2 = Make(struct end)
    #+END_SRC
    Now, =M1.t= and =M2.t= are incompatible - 

    #+BEGIN_SRC ocaml
      # M1.Variant = M2.Variant;;
      Error: This expression has type M2.t but an expression was expected of
      type M1.t
    #+END_SRC

    =Clflags= seems to have global variable options which will be set by
    other modules. So it has some reference values which introduces an
    indirection.
*** [[file:~/ocaml-svn/utils/ccomp.ml][utils:ccomp]]
    A module compiling C files and building c libraries. It's mainly
    involved in calling external commands.
*** [[file:~/ocaml-svn/utils/config.ml][utils:config]]
    It's another module which has a lot of configurations. It's generated
    by =config.mlbuild=
*** [[file:~/ocaml-svn/utils/consistbl.ml][utils:consistbl]]
    It's a module for checking consistency of module CRCs.
*** [[file:~/ocaml-svn/utils/misc.ml][utils:misc]]

    #+BEGIN_SRC ocaml
      val find_in_path: string list -> string -> string
              (* Search a file in a list of directories. *)
      val find_in_path_uncap: string list -> string -> string
              (* Same, but search also for uncapitalized name, i.e.
                 if name is Foo.ml, allow /path/Foo.ml and /path/foo.ml
                 to match. *)
      val remove_file: string -> unit
              (* Delete the given file if it exists. Never raise an error. *)
      val expand_directory: string -> string -> string
              (* [expand_directory alt file] eventually expands a [+] at the
                 beginning of file into [alt] (an alternate root directory) *)
          
    #+END_SRC

    #+BEGIN_SRC ocaml
      let read_pers_struct modname filename =
        let cmi = read_cmi filename in
        let name = cmi.cmi_name in
        let sign = cmi.cmi_sign in
        let crcs = cmi.cmi_crcs in
        let flags = cmi.cmi_flags in
        let comps =
            !components_of_module' empty Subst.identity
                                   (Pident(Ident.create_persistent name))
                                   (Mty_signature sign) in
          let ps = { ps_name = name;
                     ps_sig = sign;
                     ps_comps = comps;
                     ps_crcs = crcs;
                     ps_filename = filename;
                     ps_flags = flags } in
          if ps.ps_name <> modname then
            raise(Error(Illegal_renaming(ps.ps_name, filename)));
          check_consistency filename ps.ps_crcs;
          List.iter
            (function Rectypes ->
              if not !Clflags.recursive_types then
                raise(Error(Need_recursive_types(ps.ps_name, !current_unit))))
            ps.ps_flags;
          Hashtbl.add persistent_structures modname (Some ps);
          ps
          
    #+END_SRC


*** [[file:~/ocaml-svn/utils/tbl.ml][utils:tbl]]
    A map data structure.(Since the bootstrapping for the ocamlc does
    not rely on stdlib)
    
*** [[file:~/ocaml-svn/utils/terminfo.ml][utils:terminfo]]

*** [[file:~/ocaml-svn/utils/warnings.ml][utils:warnings]]
    A moduley defining different warnings.
    It has some global state, so when do the compiling, there's always
    a following:
    #+BEGIN_SRC ocaml
      val check_fatal : unit -> unit;;
    #+END_SRC
